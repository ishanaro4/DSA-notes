class Solution {
    //Solution we dont start from top to bottom because 
    //we wont be able to get independent problems
    //say we choose 5 ballon at first then
    //[3, 1] [8] then if we know burst 1 then we will need to multiply
    //3<--1-->8(5 is already done) but 8 is now in second subproblem
    //therefore we start from last(i.e choosing what will be remaining in last)
    //and then progressively going up, say we choose at last 5 would be remaining then problem would be divided into 1[3,1]5 and 5[8]1 now even if 1 is chosen then we would get 1*1*5(as in second last stage we assuming [1,5] would be remaining now)
    public int helper(int i, int j, int[] nums, int[][] dp){//TC- O(N^3)
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int maxi = Integer.MIN_VALUE;
        for(int k=i;k<=j;k++){
            int cost = nums[i-1]*nums[k]*nums[j+1] + helper(i, k-1, nums, dp) + helper(k+1, j, nums, dp);
            if(cost > maxi) maxi = cost;
        }
        return dp[i][j] = maxi;
    }

    public int maxCoins(int[] nums) {
        int[] nums1 = new int[nums.length+2];
        nums1[0]=1;
        for(int i=0;i<nums.length;i++){
            nums1[i+1] = nums[i];
        }
        nums1[nums1.length-1] = 1;
        int[][] dp = new int[nums.length+1][nums.length+1];
        for(int[] row : dp) Arrays.fill(row, -1);
        return helper(1, nums.length, nums1, dp);

        //Bottom Up Solution
        int[] nums1 = new int[nums.length+2];
        nums1[0]=1;
        for(int i=0;i<nums.length;i++){
            nums1[i+1] = nums[i];
        }
        nums1[nums1.length-1] = 1;
        int[][] dp = new int[nums.length+2][nums.length+2];
        for(int[] row : dp) Arrays.fill(row, 0);
        for(int i=nums.length;i>=1;i--){
            for(int j=1;j<=nums.length;j++){
                if(i>j) continue;
                int maxi = Integer.MIN_VALUE;
                for(int k=i;k<=j;k++){
                    int cost = nums1[i-1]*nums1[k]*nums1[j+1] + dp[i][k-1] + dp[k+1][j];
                    if(cost > maxi) maxi = cost;
                }
                dp[i][j] = maxi;
            }
        }
        return dp[1][nums.length];
    }
}