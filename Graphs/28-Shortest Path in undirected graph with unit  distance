// You are given an Undirected Graph having unit weight, 
// Find the shortest path from src to all the vertex and if 
// it is unreachable to reach any vertex, then return -1 for that vertex.

//we will start bfs from given src node and take src dist as 0 intially.
//then for each neihbour of temp node from queue we relax neighbour only if
// dist[temp]+1<dist[neighbour] and we then add neighbour to queue as well if we had 
//successflully relaxed it(as this new neighbour lesser distance would help in future to relax
//its neighbours).

//time complexity bfs o(v+2e)
class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++) adj.add(new ArrayList<>());
        for(int i=0;i<m;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        int[] dist = new int[n];//----------------
        Arrays.fill(dist, (int)1e9);//----------------
        dist[src] = 0;//----------------
        Deque<Integer> queue = new ArrayDeque<>();
        queue.add(src);
        while(!queue.isEmpty()){
            int temp = queue.remove();
            for(int nei : adj.get(temp)){
                
                if(dist[temp] + 1 < dist[nei]){//----------------
                    dist[nei] = dist[temp]+1;//----------------
                    queue.add(nei);//----------------
                }
            }
        }
        for(int i=0;i<n;i++){
            if(dist[i]==(int)1e9) dist[i]=-1;
        }
        return dist;
    }
    
}