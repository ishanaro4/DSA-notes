// You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

// Return the size of the largest island in grid after applying this operation.

// An island is a 4-directionally connected group of 1s.

// Example 1:

// Input: grid = [[1,0],[0,1]]
// Output: 3
// Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
//https://leetcode.com/problems/making-a-large-island/description/

//Solution = use disjointset unionby size as it stores the size of all connected components as well
//TC - O(N2)
class DisjointSet//time complexity for both operations= O(4ALPHA) where
//alpha is some constant
{
    int rank[];//where N is number of nodes
    int size[];
    int parent[];
    DisjointSet(int n){
        rank = new int[n+1];
        size = new int[n+1];
        parent = new int[n+1];
        for(int i=0;i<=n;i++) parent[i]=i;
        Arrays.fill(rank, 0);
        Arrays.fill(size, 1);//coz intially all will have size 1
    }
	int find(int X)//find parent
        {
          //add code here.
          if(parent[X]==X) return X;
          int par = find(parent[X]);
          parent[X] = par;
          return par;
          
	}
	void unionSetByRank(int X,int Y)
        {
         //add code here.
         int parentX = find(X);
         int parentY = find(Y);
         if(parentX==parentY) return;
         if(rank[parentX] < rank[parentY]){
             parent[parentX] = parentY;//we do this not the other way around
             //like parent[parentY] = parentX for this condition
             //coz to make size minimal of union and
             //so that parent retireval time for larger rank graph is made as minimum
             //as possible.
         }
         else if(rank[parentX] > rank[parentY]){
             parent[parentY] = parentX;
         }
         else{
             parent[parentX] = parentY;
             rank[parentY]++;
         }
	}

    void unionSetBySize(int X,int Y)
        {
         //add code here.
         int parentX = find(X);
         int parentY = find(Y);
         if(parentX==parentY) return;
         if(size[parentX] < size[parentY]){
             parent[parentX] = parentY;
             size[parentY] = size[parentY] + size[parentX];
         }
         else{
             parent[parentY] = parentX;
             size[parentX] = size[parentY] + size[parentX];
         }
    
	}
}

class Solution {
    public int largestIsland(int[][] grid) {
        int n = grid.length;
        DisjointSet ds = new DisjointSet(n*n);
        int delrow[] = {-1,1,0,0};
        int delcol[] = {0,0,-1,1};
        //STEP 1 - to connect all the 1's adjacent to each other so that we know size of all components in given matrix
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0) continue;
                int node_num = i*n + j;
                for(int k=0;k<4;k++){
                    int row = i + delrow[k];
                    int col = j + delcol[k];
                    int nei_num = row*n + col;
                    if(row>=0&&row<n&&col>=0&&col<n&&grid[row][col]==1)ds.unionSetBySize(node_num, nei_num);
                }

            }
        }

        //step 2
        //maintain a set of neighbours parents when searching four directions as two neighbours can belong to same component i.e same parent therefore no needto add size twice.
        //so loop thru all elements and when found zero , try connceting all neighbour components and find the total size (including its one) and if its bigger than max size till now then update max size.
        //if you are unable to find zero then max will be MIN_VALUE only therefore max island will be obv n*n
        Set<Integer> components = new HashSet<>();
        int maxi = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                     for(int k=0;k<4;k++){
                        int row = i + delrow[k];
                        int col = j + delcol[k];
                        int nei_num = row*n + col;
                        if(row>=0&&row<n&&col>=0&&col<n&&grid[row][col]==1)components.add(ds.find(nei_num));
                    }
                    int size=0;
                    for(Integer comp : components){
                        size+=ds.size[comp];
                    }
                    maxi = Math.max(maxi, size+1);
                    components.clear();
                }
            }
        }
        return maxi==Integer.MIN_VALUE?n*n : maxi;
    }
}