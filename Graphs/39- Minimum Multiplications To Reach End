// Given start, end and an array arr of n numbers. 
// At each step, start is multiplied with any number in the array and 
// then mod operation with 100000 is done to get the new start.

// Your task is to find the minimum steps in which end can be achieved 
// starting from start. If it is not possible to reach end, then return -1.

// Example 1:

// Input:
// arr[] = {2, 5, 7}
// start = 3, end = 30
// Output:
// 2
// Explanation:
// Step 1: 3*2 = 6 % 100000 = 6 
// Step 2: 6*5 = 30 % 100000 = 30



class Pair{
    int step;
    int number;
    Pair(int step, int number){
        this.step = step;
        this.number = number;
    }
}
class Solution {
    int mod = 100000;
    int minimumMultiplications(int[] arr, int start, int end) {

        // Your code here
        Deque<Pair> queue = new ArrayDeque<>();
        int[] dist = new int[100000];//we making array of all possible 
        //0-9999 numbers that can be formed with multiplications
        //we start from start, 0 steps and continue till we get the end number
        //each time step will be increased by 1.
        //we use dijkstra here due to intuition that (0,3) would start forming graph
        //if we start considering all possibl multiplications from it
        //i.e     0,3           and say array [2,5,7]
        //   |     |      |
        //  1,6   1,15    1,21
        // | | |   |  | |  | | |(again 3 possible numbers 2,5,7 and incresing steps)
        // 2,12 2,30 2,42     (therefore we found 30 in minimum of 2 steps)
        //so now questions bumps to find minimum stpes to reach end from start
        //which is dijkstra.
        Arrays.fill(dist, (int)1e9);
        dist[start]=0;
        queue.add(new Pair(0, start));
        while(!queue.isEmpty()){
            Pair temp = queue.remove();
            if(temp.number==end) return temp.step;
            for(int i:arr){
                int nei = (i*temp.number)%mod;
                if(temp.step + 1 < dist[nei]){
                    dist[nei] = temp.step + 1;
                    queue.add(new Pair(dist[nei], nei));
                }
            }
        }
        return -1;
    }
}