// You are a hiker preparing for an upcoming hike. 
//You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). 
//You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). 
//You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.
// A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
// Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

// Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
// Output: 2
// Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
// This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.






class Tuple{ //DIjkstra Algortihm application
    int dist;
    int row;
    int col;
    Tuple(int dist, int row, int col){
        this.dist = dist;
        this.row = row;
        this.col = col;
    }
}

class Solution {
    public int minimumEffortPath(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        PriorityQueue<Tuple> queue = new PriorityQueue<>((a,b)-> a.dist - b.dist);//-----
        int[][] dist = new int[n][m];
        for(int[] row : dist) Arrays.fill(row, (int)1e9);
        dist[0][0]=0;
        queue.add(new Tuple(0, 0, 0));
        
        int[] delrow = {-1,1,0,0};
        int[] delcol = {0,0,-1,1};
        //Time Complexity = ELOGV
        //= nxmx4 x log(nxm)
        while(!queue.isEmpty()){
            Tuple temp = queue.remove();
            int i = temp.row;
            int j = temp.col;
            if(i==n-1&&j==m-1) return temp.dist;
            for(int k=0;k<4;k++){
                int row = delrow[k]+i;
                int col = delcol[k]+j;
                if(row>=0&&row<n&&col>=0&&col<m&&(Math.max(temp.dist, Math.abs(grid[i][j] - grid[row][col]))< dist[row][col])){
                    dist[row][col] = Math.max(temp.dist, Math.abs(grid[i][j] - grid[row][col]));
                    queue.add(new Tuple(dist[row][col], row, col));
                }
            }

        }
        return 0;
    }
}