// Given a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array(or vector) 
//edges[ ][ ] of length M, where there is a directed edge from edge[i][0] to edge[i][1] 
//with a distance of edge[i][2] for all i, 0<=i
// Find the shortest path from src(0) vertex to all the vertices and if it is impossible to reach any vertex, 
//then return -1 for that vertex.
// n = 6, m= 7
// edge=[[0,1,2],[0,4,1],[4,5,4]

//Solution is similar to topo kahn algo but addition is that as if start removing vertices 
//from graph(queue) we keep relaxing the edges of neighbours(if distance of queue node + weight<dist[neigh] 
//we change the distance of neigh).

//time complexity  - O(V + M) where m is no of edges
class Pair{
    int node;
    int weight;
    Pair(int node, int weight){
        this.node = node;
        this.weight = weight;
    }
}
//User function Template for Java
class Solution {

	public int[] shortestPath(int V,int M, int[][] edges) {
		//Code here
		List<List<Pair>> adj = new ArrayList<>();
		for(int i=0;i<V;i++){
		    adj.add(new ArrayList<Pair>());
		}
		for(int i=0;i<M;i++){
		    adj.get(edges[i][0]).add(new Pair(edges[i][1], edges[i][2]));
		}
		int[] dist = new int[V];//-------------------------
		Arrays.fill(dist, 1000_000_000);//-------------------------
        dist[0] = 0;//-------------------------
        //travering the adjacency list to create indegree array
        int[] indegree = new int[V];
        for(int i=0;i<V;i++){
            for(Pair elem : adj.get(i)){
                indegree[elem.node]++;
            }
        }
        Deque<Integer> queue = new ArrayDeque<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0)queue.add(i);//pushing all 0 indegree elem to queue
        }//even if multiple components exist,all elem with indegree 0 would be
        //added to the queue
        
        //remove element from queue(until empty) and as you remove
        //element, decrement its neighbours indegree by 1 and if 
        //neigbour indegree becomes 0 add it to queue.
        while(!queue.isEmpty()){
            int temp = queue.remove();
            for(Pair i : adj.get(temp)){
                indegree[i.node]--;
                if(indegree[i.node]==0)queue.add(i.node);
                if(dist[temp] + i.weight < dist[i.node]){ //-------------------------
                    dist[i.node] = dist[temp] + i.weight;//-------------------------
                }//-------------------------
            }
        }
        for(int i=0;i<V;i++){
            if(dist[i]==1000_000_000) dist[i]=-1;
        }
        return dist;
	}
}