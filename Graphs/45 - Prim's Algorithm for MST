// Given a weighted, undirected and connected graph of V vertices and E edges. 
// The task is to find the sum of weights of the edges of the 
// Minimum Spanning Tree.

// Example 1:

// Input:
// 3 3
// 0 1 5
// 1 2 3
// 0 2 1
// Output: 4



class Pair{
    int node;
    int dist;
    Pair(int node, int dist){
        this.node = node;
        this.dist = dist;
    }
}
class Tuple{
    int weight;
    int node;
    int parent;
    Tuple(int weight, int node, int parent){
        this.weight = weight;
        this.node = node;
        this.parent = parent;
    }
}
class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    // Code Here. 
	    List<List<Pair>> adj = new ArrayList<>();
	    for(int i=0;i<V;i++){
	        adj.add(new ArrayList<>());
	    }
	    for(int[] edge : edges){
	        int node1 = edge[0];
	        int node2 = edge[1];
	        int weight = edge[2];
	        adj.get(node1).add(new Pair(node2, weight));
	        adj.get(node2).add(new Pair(node1, weight));
	    }
	    int sum = 0;
	    int[] visited = new int[V];
	    Arrays.fill(visited, 0);
	    PriorityQueue<Tuple> minheap = new PriorityQueue<>((a, b) -> a.weight - b.weight);
	    minheap.add(new Tuple(0, 0, -1));
	    int MSTedges[][] = new int[V-1][2];
	    int MSTindex = 0;
	    while(!minheap.isEmpty()){ //will run for E edges times
	        Tuple temp = minheap.remove(); //minheap so remove take log..and if 0 node
	        //is connected to all other nodes then logE will be required.
	        if(visited[temp.node]==1) continue;
	        visited[temp.node]=1;
	        if(temp.parent!=-1) {
	            MSTedges[MSTindex] = new int[]{temp.parent, temp.node};
	            sum+=temp.weight;
	        }
	        for(Pair nei : adj.get(temp.node)){//overall we will go across all edges
	        //and logE for add operation ..i.e ELOGE.
	            if(visited[nei.node]==0) minheap.add(new Tuple(nei.dist, nei.node, temp.node));
	        }
	    }
	    //overall time complexity = ELOGE + ELOGE = ELOGE
	    //SPACE COMPLEXITY = O(E) + O(V) for minheap
	    return sum;
	}
}