//Problem - Given a boolean 2D matrix grid of size n * m. 
//You have to find the number of distinct islands where a group of connected 1s (horizontally or vertically) forms an island. 
//Two islands are considered to be distinct if and only if one island is not equal to another (not rotated or reflected).
class Pair{
    int row;
    int col;
    Pair(int row, int col){
        this.row = row;
        this.col = col;
    }
}
class Solution {
    
    void bfs(int i, int j, boolean[][] visited, Set<List<String>> ans, int[][] grid){
        int n = grid.length;
        int m = grid[0].length;
        Deque<Pair> queue = new ArrayDeque<>();
        List<String> ls = new ArrayList<>();
        queue.add(new Pair(i, j));
        visited[i][j]=true;
        int row0 = i;
        int col0 = j;
        int[] delrow = {-1,1,0,0};
        int []delcol = {0,0,-1,1};
        while(!queue.isEmpty()){
            Pair temp = queue.remove();
            ls.add(toString(temp.row - row0, temp.col - col0));
            for(int k=0;k<4;k++){
                int row = delrow[k]+temp.row;
                int col = delcol[k]+temp.col;
                if(row>=0&&row<n&&col>=0&&col<m&&visited[row][col]==false&&grid[row][col]==1){
                    visited[row][col]=true;
                    queue.add(new Pair(row, col));
                }
            }
        }
        ans.add(ls);
        
    }
    String toString(int r, int c){
        return Integer.toString(r)+" "+Integer.toString(c);
    }

    int countDistinctIslands(int[][] grid) {
        // Your Code here
        int n = grid.length;
        int m = grid[0].length;
        Set<List<String>> ans = new HashSet<>();// space complexity n*m if all becomes 1 then
        //everytinh needs to store in queue
        boolean[][] visited = new boolean[n][m];
        for(int i=0;i<n;i++){// time complexity n*m + below bfs(n*m*4) == O(NM)
            for(int j=0;j<m;j++){
                if(grid[i][j]==1&&visited[i][j]==false){
                    bfs(i, j, visited, ans, grid);
                }
            }
        }
        return ans.size();
        
    }
}
