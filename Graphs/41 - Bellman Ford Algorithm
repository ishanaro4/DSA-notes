//works only for directed graph and helps to detect negative cycles in graphs
//Definition - Relaxation of all Edges N-1 times where N = no of vertices
//TC - VXE
//USED TO FIND SINGLE SOURCE TO ALL VERTICES SHORTEST PATH
class Solution {
    static int[] bellman_ford(int v, ArrayList<ArrayList<Integer>> edges, int s) {
        // Write your code here
        int dist[] = new int[v];
        Arrays.fill(dist, (int)1e8);
        dist[s]=0;
        //relaxation of all edges V-1 times
        for(int i=0;i<v-1;i++){//0 to v-1(is V times) and 0 to V-2(V-1 TIMES)
                for(ArrayList<Integer> edge : edges){
                    int source = edge.get(0);
                    int dest = edge.get(1);
                    int weight = edge.get(2);
                    if(dist[source]!=(int)1e8 && dist[source] + weight < dist[dest]){
                        dist[dest] = dist[source] + weight;
                }
            }
        }
        
        //doing relaxation one more time to check for negative cycle(if distance still changes
        //it means negative cycle)
        for(ArrayList<Integer> edge : edges){
            int source = edge.get(0);
            int dest = edge.get(1);
            int weight = edge.get(2);
            if(dist[source]!=(int)1e8 && dist[source] + weight < dist[dest]){
                return new int[]{-1};
            }
        }
        return dist;
        
    }
}