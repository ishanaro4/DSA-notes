//TOPOLOGICAL SORT(Condition is Directed acyclic graph)
//Linear ordering of vertices such that if there is edge betwen u and v then u appers before v
// in the ordering.

//DFS solution using stack(when all neigbours are exhausted we push that element in stack then return back)
//in this way top element of stack would be element we started dfs from.
import java.util.*;

class Solution {
    private static void dfs(int node, int vis[], Stack<Integer> st,
            ArrayList<ArrayList<Integer>> adj) {
        vis[node] = 1;
        for (int it : adj.get(node)) {
            if (vis[it] == 0)
                dfs(it, vis, st, adj);
        }
        st.push(node);
    }

    // Function to return list containing vertices in Topological order.
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        int vis[] = new int[V];
        Stack<Integer> st = new Stack<Integer>();
        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                dfs(i, vis, st, adj);
            }
        }

        int ans[] = new int[V];
        int i = 0;
        while (!st.isEmpty()) {
            ans[i++] = st.peek();
            st.pop();
        }
        return ans;
    }
}
//KAHN'S ALGORITHM(BFS WITH INDEGREE ARRAY) TC - O(V+E) SC - O(V) (directed graph so only E)
class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] ans = new int[V];
        int j=0;//travering the ans array
        //travering the adjacency list to create indegree array
        int[] indegree = new int[V];
        for(int i=0;i<V;i++){
            for(int elem : adj.get(i)){
                indegree[elem]++;
            }
        }
        Deque<Integer> queue = new ArrayDeque<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0)queue.add(i);//pushing all 0 indegree elem to queue
        }//even if multiple components exist,all elem with indegree 0 would be
        //added to the queue
        
        //remove element from queue(until empty) and as you remove
        //element, decrement its neighbours indegree by 1 and if 
        //neigbour indegree becomes 0 add it to queue.
        while(!queue.isEmpty()){
            int temp = queue.remove();
            ans[j++] = temp;
            for(int i : adj.get(temp)){
                indegree[i]--;
                if(indegree[i]==0)queue.add(i);
            }
        }
        return ans;
        
        
        
    }
}
