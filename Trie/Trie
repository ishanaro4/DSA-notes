class Node{
    Node links[] = new Node[26];//array of 26 english alpohabets with each alphabet point to Node object or null
    boolean flag = false;

    public Node(){

    }

    boolean containsKey(char ch){
        return (links[ch-'a']!=null);
    }

    Node get(char ch){
        return links[ch-'a'];
    }

    void put(char ch, Node node){
        links[ch-'a'] = node;
    }

    void setEnd(){
        flag = true;
    }

    boolean isEnd(){
        return flag;
    }
}

public class Trie{
    private static Node root;

    Trie(){
        root = new Node();
    }

    public static void insert(String word){// TC - O(LEN)
        Node node = root;
        for(int i=0;i<word.length();i++){
            char ch = word.charAt(i);
            if(!containsKey(ch)){
                node.put(ch, new Node());
            }
            node = node.get(ch);
        }
        node.setEnd();//as word is inserted so last node of word is set to true to indicate here the word ends
    }

    public static boolean search(String word){//TC - O(len)
        Node node = root;
        for(int i=0;i<word.length();i++){
            char ch = word.charAt(i);
            if(!node.containsKey(ch)) return false;
            node = node.get(ch);
        }
        if(!node.isEnd()) return false;
        return true;
    }

    public static boolean startsWith(String prefix){
        Node node = root;
        for(int i=0;i<prefix.length();i++){
            char ch = prefix.charAt(i);
            if(!node.containsKey(ch)) return false;
            node = node.get(ch);
        }
        return true;
    }
}